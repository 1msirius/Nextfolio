---
description: Guidelines for creating and formatting blog posts using MDX in the personal blog
globs: 
alwaysApply: false
---

# Blog Post Creation Guide

This rule provides a comprehensive guide for creating, structuring, and formatting blog posts for the personal blog using MDX.

## Overview

Blog posts are written in MDX format, which allows you to combine Markdown with JSX components. This format enables rich content creation with custom components like tweets, YouTube videos, image grids, and mathematical expressions.

## File Structure and Location

All blog posts should be stored in the `content/` directory at the root of the project:

```
content/
â”œâ”€â”€ my-first-post.mdx
â”œâ”€â”€ another-post.mdx
â””â”€â”€ technical-deep-dive.mdx
```

The filename will be used as the URL slug for the post. For example, `my-first-post.mdx` will be accessible at `/blog/my-first-post`.

## Frontmatter Requirements

Every blog post must include frontmatter at the beginning of the file. Frontmatter is metadata enclosed between triple dashes (`---`):

```mdx
---
title: 'Your Post Title'
publishedAt: '2024-05-01'
summary: 'A brief description of your post (used for SEO and previews).'
tags: 'Tag1, Tag2, Tag3'
image: '/optional-image-path.png'
hidden: false
---

Post content starts here...
```

### Required Fields

- **title**: The title of your blog post
- **publishedAt**: The publication date in `YYYY-MM-DD` format
- **summary**: A brief description (under 160 characters for SEO)
- **tags**: Comma-separated list of relevant tags

### Optional Fields

- **image**: Path to a custom OG image for social media sharing. If not provided, a default OG image will be generated.
- **hidden**: Set to `true` to hide the post from the blog listing (but it will still be accessible via direct URL)

## Content Formatting

### Basic Markdown

Standard Markdown syntax works as expected:

```mdx
# Heading 1
## Heading 2
### Heading 3

**Bold text** and *italic text*

- Bullet point
- Another bullet point

1. Numbered item
2. Another numbered item

[Link text](mdc:https:/example.com)

![Alt text](mdc:path/to/image.jpg)
```

### Code Blocks

Use triple backticks with language specifier for syntax highlighting:

````mdx
```typescript
function greet(name: string): string {
  return `Hello, ${name}!`;
}
```
````

### Custom Components

The blog includes several custom components you can use in your MDX:

#### Tweet Embedding

```mdx
<StaticTweet id="1234567890123456789" />
```

#### YouTube Videos

```mdx
<YouTube videoId="dQw4w9WgXcQ" />
```

#### Image Grid

```mdx
<ImageGrid>
  ![Image 1](mdc:image1.jpg)
  ![Image 2](mdc:image2.jpg)
  ![Image 3](mdc:image3.jpg)
</ImageGrid>
```

#### Captions

```mdx
<Caption>This is a caption for the image/media above</Caption>
```

#### Mathematical Expressions

The blog supports KaTeX for mathematical expressions:

```mdx
Inline math: $E=mc^2$

Display math:
$$
\frac{d}{dx}e^x = e^x
$$
```

### Callouts

Use the Callout component for highlighting important information:

```mdx
<Callout emoji="ðŸ’¡">
  This is a tip or piece of information you want to highlight.
</Callout>
```

## Implementation Steps

1. Create a new `.mdx` file in the `content/` directory with a descriptive filename (using kebab-case)
2. Add the required frontmatter at the top of the file
3. Write your content using Markdown and custom components
4. Test the post by running the development server (`pnpm dev`) and navigating to `/blog/your-post-slug`

## Real-World Examples

For reference, examine these existing blog posts:

- [Getting Started Guide](mdc:../../content/getting-started.mdx) - Basic post structure and formatting
- [MDX Examples](mdc:../../content/custom-mdx-examples.mdx) - Demonstrates custom components

## Common Pitfalls

### Metadata Issues

- **Missing Required Fields**: Ensure all required frontmatter fields are present
- **Date Format**: The `publishedAt` field must use `YYYY-MM-DD` format
- **Quotes**: Wrap values containing special characters in quotes

### Content Issues

- **Broken Images**: Ensure image paths are correct and images exist in the public directory
- **Component Errors**: Check that all custom components are properly imported and used
- **Syntax Errors**: Ensure all MDX syntax is valid and properly closed
- **Large Media**: Compress images before adding them to keep page load times fast

## Publishing Workflow

1. Write your post in the `content/` directory
2. Set `hidden: true` during drafting and review
3. When ready to publish, set `hidden: false` and ensure the `publishedAt` date is correct
4. Commit and push your changes to deploy the new post

By following these guidelines, you'll create consistent and well-formatted blog posts that take full advantage of the blog's capabilities.
